// import React, { Component } from "react";
// import "./style/Compiler.css";
// import Swal from 'sweetalert2';
// import withReactContent from 'sweetalert2-react-content';
// import io from 'socket.io-client'; // Import the socket.io-client library


// const MySwal = withReactContent(Swal);

// export default class Compiler extends Component {

//   constructor(props) {
//     super(props);
//     this.state = {
//       input: localStorage.getItem('input')||``,
//       output: ``,
//       language_id:localStorage.getItem('language_Id')|| 2,
//       user_input: ``,
//       user:'hello',
//       isLoaded: true,
//     };
//     this.navigate = this.navigate.bind(this);
//     this.socket = io();
//   }
  
//   componentDidMount() {
//     const token = localStorage.getItem('token');
//     var myHeaders = new Headers();
//     myHeaders.append('Authorization', 'Bearer ' + token);
//     var requestOptions = {
//       method: 'GET',
//       headers: myHeaders,
//       redirect: 'follow',
//     };
  
//     fetch('https://www.melivecode.com/api/auth/user', requestOptions)
//       .then((response) => response.json())
//       .then((result) => {
//         console.log(result);
//         if (result.status === 'ok') {
//           this.setState({
//             user: result.user, 
//             isLoaded: false 
//           });
//         } else if (result.status === 'forbidden') {
//           MySwal.fire({
//             html: <i>{result.message}</i>,
//             icon: 'error',
//           }).then((value) => {
//             window.location.href = '/';
//           });
//         }
//       // Send the username to the server
//       this.socket.emit("username", result.user.username);
//       })
//       .catch((error) => console.log('error', error));
          
//     this.socket=io("http://localhost:3001", {
//       withCredentials: true,
//       extraHeaders: {
//         "my-custom-header": "abcd"
//       }
//     });
    
//     // Listen for messages from the server
//     this.socket.on("message", (message) => {
//       console.log("Received message from server:", message);
//       // Do something with the message here, if needed.
//     });
//   }

//   navigate(path) {
//     this.props.history.push(path);
//   }

//   // state = {
//   //   user: null,
//   //   isLoaded: true,
//   // };

//   input = (event) => { 
//     event.preventDefault();
//     this.setState({ input: event.target.value });
//     localStorage.setItem('input', event.target.value) 
//   };
  
//   userInput = (event) => {
//     event.preventDefault();
//     this.setState({ user_input: event.target.value });
//   };
  
//   language = (event) => {  
//     event.preventDefault();
//     this.setState({ language_id: event.target.value });
//     localStorage.setItem('language_Id',event.target.value)
   
//   };


//   submit = async (e) => {
//     e.preventDefault();
//     let outputText = document.getElementById("output");
//     outputText.innerHTML = "";
//     outputText.innerHTML += "Creating Submission ...\n";
//     const response = await fetch(
//       "https://judge0-ce.p.rapidapi.com/submissions",
//       {
//         method: "POST",
//         headers: {
//           "x-rapidapi-host": "judge0-ce.p.rapidapi.com",
//           // "x-rapidapi-key": "be061a261dmsh0b67cecce0e7afcp1c8d54jsn3d1482f87e23", 
//           'X-RapidAPI-Key': '42c866f057msha262e41210b2ac8p16a477jsnfcb2b6ab82bb', // Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/
//           "content-type": "application/json",
//           accept: "application/json",
//         },
//         body: JSON.stringify({
//           source_code: this.state.input,
//           stdin: this.state.user_input,
//           language_id: this.state.language_id,
//         }),
//       }
//     );
    
//     outputText.innerHTML += "Submission Created ...\n";
//     const jsonResponse = await response.json();
//     let jsonGetSolution = {
//       status: { description: "Queue" },
//       stderr: null,
//       compile_output: null,
//     };
//     while (
//       jsonGetSolution.status.description !== "Accepted" &&
//       jsonGetSolution.stderr == null &&
//       jsonGetSolution.compile_output == null
//     ) {
//       outputText.innerHTML = `Creating Submission ... \nSubmission Created ...\nChecking Submission Status\nstatus : ${jsonGetSolution.status.description}`;
//       if (jsonResponse.token) {
//         let url = `https://judge0-ce.p.rapidapi.com/submissions/${jsonResponse.token}?base64_encoded=true`;
//         const getSolution = await fetch(url, {
//           method: "GET",
//           headers: {
//             "x-rapidapi-host": "judge0-ce.p.rapidapi.com",
//             // "x-rapidapi-key": "be061a261dmsh0b67cecce0e7afcp1c8d54jsn3d1482f87e23", 
//             'X-RapidAPI-Key': '42c866f057msha262e41210b2ac8p16a477jsnfcb2b6ab82bb',// Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/
//             "content-type": "application/json",
//           },
//         });
//         jsonGetSolution = await getSolution.json();
//       }
//     }
    
//     if (jsonGetSolution.stdout) {
//       const output = atob(jsonGetSolution.stdout);
//       outputText.innerHTML = "";
//       outputText.innerHTML += `Results :\n${output}\nExecution Time : ${jsonGetSolution.time} Secs\nMemory used : ${jsonGetSolution.memory} bytes`;
//       this.socket.emit('solutionData', {
//         user: this.state.user.username,
//         memory: jsonGetSolution.memory,
//         time: jsonGetSolution.time,
//         stdout: output
//     });
//     } else if (jsonGetSolution.stderr) {
//       const error = atob(jsonGetSolution.stderr);
//       outputText.innerHTML = "";
//       outputText.innerHTML += `\n Error :${error}`;
//     } else {
//       const compilation_error = atob(jsonGetSolution.compile_output);
//       outputText.innerHTML = "";
//       outputText.innerHTML += `\n Error :${compilation_error}`;
//     }
//   };
  
//   render() {
//     if (this.state.isLoaded) {
//       return <div>Loading...</div>;
//     } 
//     return (
//       <>
//         <div className="row container-fluid">
//         <h1>{this.state.user.username}</h1>
//           <div className="col-6 ml-4 ">
//             <label htmlFor="solution ">
//               <span className="badge badge-info heading mt-2 ">
//                 <i className="fas fa-code fa-fw fa-lg"></i> Code Here
//               </span>
//             </label>
//             <textarea
//               required
//               name="solution"
//               id="source"
//               onChange={this.input}
//               className=" source"
//               value={this.state.input}
//             ></textarea>
//             <button
//               type="submit"
//               className="btn btn-danger ml-2 mr-2 "
//               onClick={this.submit}
//             >
//               <i className="fas fa-cog fa-fw"></i> Run
//             </button>

//             <label htmlFor="tags" className="mr-1">
//               <b className="heading">Language:</b>
//             </label>
//             <select
//               value={this.state.language_id}
//               onChange={this.language}
//               id="tags"
//               className="form-control form-inline mb-2 language"
//             >
//               <option value="54">C++</option>
//               <option value="50">C</option>
//               <option value="62">Java</option>
//               <option value="71">Python</option>
//             </select>
//           </div>
//           <div className="col-5">
//             <div>
//               <span className="badge badge-info heading my-2 ">
//                 <i className="fas fa-exclamation fa-fw fa-md"></i> Output
//               </span>
//               <textarea id="output"></textarea>
//             </div>
//           </div>
//         </div>
//         <div className="mt-2 ml-5">
//           <span className="badge badge-primary heading my-2 ">
//             <i className="fas fa-user fa-fw fa-md"></i> User Input
//           </span>
//           <br />
//           <textarea id="input" onChange={this.userInput}></textarea>
//         </div>
//       </>
//     );
//   }
// }




// import React, { Component } from "react";
// import "./style/Compiler.css";
// import Swal from 'sweetalert2';
// import withReactContent from 'sweetalert2-react-content';
// import io from 'socket.io-client'; // Import the socket.io-client library


// const MySwal = withReactContent(Swal);

// export default class Compiler extends Component {

//   constructor(props) {
//     super(props);
//     this.state = {
//       input: localStorage.getItem('input')||``,
//       output: ``,
//       language_id:localStorage.getItem('language_Id')|| 2,
//       user_input: ``,
//       user:'hello',
//       testCaseResults: {}, // Initialize test case results object,
//       isLoaded: true,
//     };
//     this.navigate = this.navigate.bind(this);
//     this.socket = io();
//   }
  
//   componentDidMount() {
//     const token = localStorage.getItem('token');
//     var myHeaders = new Headers();
//     myHeaders.append('Authorization', 'Bearer ' + token);
//     var requestOptions = {
//       method: 'GET',
//       headers: myHeaders,
//       redirect: 'follow',
//     };
  
//     fetch('https://www.melivecode.com/api/auth/user', requestOptions)
//       .then((response) => response.json())
//       .then((result) => {
//         console.log(result);
//         if (result.status === 'ok') {
//           this.setState({
//             user: result.user, 
//             isLoaded: false 
//           });
//         } else if (result.status === 'forbidden') {
//           MySwal.fire({
//             html: <i>{result.message}</i>,
//             icon: 'error',
//           }).then((value) => {
//             window.location.href = '/';
//           });
//         }
//       // Send the username to the server
//       this.socket.emit("username", result.user.username);
//       })
//       .catch((error) => console.log('error', error));
          
//     this.socket=io("http://localhost:3001", {
//       withCredentials: true,
//       extraHeaders: {
//         "my-custom-header": "abcd"
//       }
//     });
    
//     // Listen for messages from the server
//     this.socket.on("message", (message) => {
//       console.log("Received message from server:", message);
//       // Do something with the message here, if needed.
//     });
//   }

//   navigate(path) {
//     this.props.history.push(path);
//   }

//   // state = {
//   //   user: null,
//   //   isLoaded: true,
//   // };

//   input = (event) => { 
//     event.preventDefault();
//     this.setState({ input: event.target.value });
//     localStorage.setItem('input', event.target.value) 
//   };
  
//   userInput = (event) => {
//     event.preventDefault();
//     this.setState({ user_input: event.target.value });
//   };
  
//   language = (event) => {  
//     event.preventDefault();
//     this.setState({ language_id: event.target.value });
//     localStorage.setItem('language_Id',event.target.value)
   
//   };


//   submit = async (e) => {
//     e.preventDefault();
//     let outputText = document.getElementById("output");
//     outputText.innerHTML = "";
//     outputText.innerHTML += "Creating Submission ...\n";
//     const testCases = [
//       { input: "1", expectedOutput: "1" },
//       // { input: "input for test_case_2", expectedOutput: "expected output for test_case_2" },
//     ];
//     for (const testCase of testCases) {
//       const response = await fetch(
//         "https://judge0-ce.p.rapidapi.com/submissions",
//         {
//           method: "POST",
//           headers: {
//             "x-rapidapi-host": "judge0-ce.p.rapidapi.com",
//             // "x-rapidapi-key": "be061a261dmsh0b67cecce0e7afcp1c8d54jsn3d1482f87e23",
//             'X-RapidAPI-Key': '42c866f057msha262e41210b2ac8p16a477jsnfcb2b6ab82bb',// Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/
//             "content-type": "application/json",
//             accept: "application/json",
//           },
//           body: JSON.stringify({
//             source_code: this.state.input,
//             stdin: this.state.user_input,
//             language_id: this.state.language_id,
//           }),
//         }
//       );
    
//       outputText.innerHTML += "Submission Created ...\n";
//       const jsonResponse = await response.json();
//       let jsonGetSolution = {
//         status: { description: "Queue" },
//         stderr: null,
//         compile_output: null,
//       };
//       while (
//         jsonGetSolution.status.description !== "Accepted" &&
//         jsonGetSolution.stderr == null &&
//         jsonGetSolution.compile_output == null
//       ) {
//         outputText.innerHTML = `Creating Submission ... \nSubmission Created ...\nChecking Submission Status\nstatus : ${jsonGetSolution.status.description}`;
//         if (jsonResponse.token) {
//           let url = `https://judge0-ce.p.rapidapi.com/submissions/${jsonResponse.token}?base64_encoded=true`;
//           const getSolution = await fetch(url, {
//             method: "GET",
//             headers: {
//               "x-rapidapi-host": "judge0-ce.p.rapidapi.com",
//               // "x-rapidapi-key": "be061a261dmsh0b67cecce0e7afcp1c8d54jsn3d1482f87e23",
//               'X-RapidAPI-Key': '42c866f057msha262e41210b2ac8p16a477jsnfcb2b6ab82bb',// Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/
//               "content-type": "application/json",
//             },
//           });
//           jsonGetSolution = await getSolution.json();
//         }
//       }
      
//       if (jsonGetSolution.stdout) {
//         const output = atob(jsonGetSolution.stdout);
//         outputText.innerHTML = "";
//         outputText.innerHTML += `Results :\n${output}\nExecution Time : ${jsonGetSolution.time} Secs\nMemory used : ${jsonGetSolution.memory} bytes`;
//         // const newTestCaseResults = { ...this.state.testCaseResults };
//         // newTestCaseResults[testCase] = "Passed";
//         // this.setState({ testCaseResults: newTestCaseResults });
//         // Compare the actual output with the expected output
//         const actualOutput = output; // Replace with your actual output
//         const expectedOutput = testCase.expectedOutput;

//         if (actualOutput === expectedOutput) {
//           // Test case passed
//           const newTestCaseResults = { ...this.state.testCaseResults };
//           newTestCaseResults[testCase.input] = "Passed";
//           this.setState({ testCaseResults: newTestCaseResults });
//         } else {
//           // Test case failed
//           const newTestCaseResults = { ...this.state.testCaseResults };
//           newTestCaseResults[testCase.input] = "Failed";
//           this.setState({ testCaseResults: newTestCaseResults });
//         }
//         this.socket.emit('solutionData', {
//           user: this.state.user.username,
//           memory: jsonGetSolution.memory,
//           time: jsonGetSolution.time,
//           stdout: output,

//       });
//       } else if (jsonGetSolution.stderr) {
//         const error = atob(jsonGetSolution.stderr);
//         outputText.innerHTML = "";
//         outputText.innerHTML += `\n Error :${error}`;
//       } else {
//         const compilation_error = atob(jsonGetSolution.compile_output);
//         outputText.innerHTML = "";
//         outputText.innerHTML += `\n Error :${compilation_error}`;
//       }
//     };
//   }
  
//   render() {
//     if (this.state.isLoaded) {
//       return <div>Loading...</div>;
//     }

//     return (
//       <>
//         <div className="row container-fluid">
//         <h1>{this.state.user.username}</h1>
//           <div className="col-6 ml-4 ">
//             <label htmlFor="solution ">
//               <span className="badge badge-info heading mt-2 ">
//                 <i className="fas fa-code fa-fw fa-lg"></i> Code Here
//               </span>
//             </label>
//             <textarea
//               required
//               name="solution"
//               id="source"
//               onChange={this.input}
//               className=" source"
//               value={this.state.input}
//             ></textarea>
//             <button
//               type="submit"
//               className="btn btn-danger ml-2 mr-2 "
//               onClick={this.submit}
//             >
//               <i className="fas fa-cog fa-fw"></i> Run
//             </button>

//             <label htmlFor="tags" className="mr-1">
//               <b className="heading">Language:</b>
//             </label>
//             <select
//               value={this.state.language_id}
//               onChange={this.language}
//               id="tags"
//               className="form-control form-inline mb-2 language"
//             >
//               <option value="54">C++</option>
//               <option value="50">C</option>
//               <option value="62">Java</option>
//               <option value="71">Python</option>
//             </select>
//           </div>
//           <div className="col-5">
//             <div>
//               <span className="badge badge-info heading my-2 ">
//                 <i className="fas fa-exclamation fa-fw fa-md"></i> Output
//               </span>
//               <textarea id="output"></textarea>
//             </div>
//           </div>
//         </div>
//         <div className="mt-2 ml-5">
//           <span className="badge badge-primary heading my-2 ">
//             <i className="fas fa-user fa-fw fa-md"></i> User Input
//           </span>
//           <br />
//           <textarea id="input" onChange={this.userInput}></textarea>

//           <div className="mt-4 ml-5">
//             <span className="badge badge-success heading my-2">
//               Test Case Results
//             </span>
//             <ul>
//               {Object.keys(this.state.testCaseResults).map((testCaseInput) => (
//                 <li key={testCaseInput}>
//                   Test Case Input: {testCaseInput} -{" "}
//                   {this.state.testCaseResults[testCaseInput]}
//                 </li>
//               ))}
//             </ul>
//           </div>
//         </div>
//       </>
//     );
//   }
// }


  run = async (e) => {
    e.preventDefault();
    let outputText = document.getElementById("output");
    outputText.innerHTML = "";
    outputText.innerHTML += "Creating Submission ...\n";
  
    const response = await fetch(
      "https://judge0-ce.p.rapidapi.com/submissions",
      {
        method: "POST",
        headers: {
          "x-rapidapi-host": "judge0-ce.p.rapidapi.com",
          "x-rapidapi-key": "be061a261dmsh0b67cecce0e7afcp1c8d54jsn3d1482f87e23",
          // 'X-RapidAPI-Key': '42c866f057msha262e41210b2ac8p16a477jsnfcb2b6ab82bb',// Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/
          "content-type": "application/json",
          accept: "application/json",
        },
        body: JSON.stringify({
          source_code: this.state.input,
          stdin: this.state.user_input,
          language_id: this.state.language_id,
        }),
      }
    );
  
    outputText.innerHTML += "Submission Created ...\n";
    const jsonResponse = await response.json();
    let jsonGetSolution = {
      status: { description: "Queue" },
      stderr: null,
      compile_output: null,
    };
    while (
      jsonGetSolution.status.description !== "Accepted" &&
      jsonGetSolution.stderr == null &&
      jsonGetSolution.compile_output == null
    ) {
      outputText.innerHTML = `Creating Submission ... \nSubmission Created ...\nChecking Submission Status\nstatus : ${jsonGetSolution.status.description}`;
      if (jsonResponse.token) {
        let url = `https://judge0-ce.p.rapidapi.com/submissions/${jsonResponse.token}?base64_encoded=true`;
        const getSolution = await fetch(url, {
          method: "GET",
          headers: {
            "x-rapidapi-host": "judge0-ce.p.rapidapi.com",
            "x-rapidapi-key": "be061a261dmsh0b67cecce0e7afcp1c8d54jsn3d1482f87e23",
            // 'X-RapidAPI-Key': '42c866f057msha262e41210b2ac8p16a477jsnfcb2b6ab82bb',// Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/
            "content-type": "application/json",
          },
        });
        jsonGetSolution = await getSolution.json();
      }
    }
    
    if (jsonGetSolution.stdout) {
      const output = atob(jsonGetSolution.stdout);
      outputText.innerHTML = "";
      outputText.innerHTML += `Results :\n${output}\nExecution Time : ${jsonGetSolution.time} Secs\nMemory used : ${jsonGetSolution.memory} bytes`;

    } else if (jsonGetSolution.stderr) {
      const error = atob(jsonGetSolution.stderr);
      outputText.innerHTML = "";
      outputText.innerHTML += `\n Error :${error}`;
    } else {
      const compilation_error = atob(jsonGetSolution.compile_output);
      outputText.innerHTML = "";
      outputText.innerHTML += `\n Error :${compilation_error}`;
    }
  }









    submit = async (e) => {
    e.preventDefault();
    let outputText = document.getElementById("output");
    outputText.innerHTML = "";
    outputText.innerHTML += "Creating Submission ...\n";
    const testCases = ["test_case_1", "test_case_2", "test_case_3"];

    for (const testCase of testCases) {
      const response = await fetch(
        "https://judge0-ce.p.rapidapi.com/submissions",
        {
          method: "POST",
          headers: {
            "x-rapidapi-host": "judge0-ce.p.rapidapi.com",
            "x-rapidapi-key": "be061a261dmsh0b67cecce0e7afcp1c8d54jsn3d1482f87e23",
            // 'X-RapidAPI-Key': '42c866f057msha262e41210b2ac8p16a477jsnfcb2b6ab82bb',// Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/
            "content-type": "application/json",
            accept: "application/json",
          },
          body: JSON.stringify({
            source_code: this.state.input,
            stdin: this.state.user_input,
            language_id: this.state.language_id,
          }),
        }
      );
    
      outputText.innerHTML += "Submission Created ...\n";
      const jsonResponse = await response.json();
      let jsonGetSolution = {
        status: { description: "Queue" },
        stderr: null,
        compile_output: null,
      };
      while (
        jsonGetSolution.status.description !== "Accepted" &&
        jsonGetSolution.stderr == null &&
        jsonGetSolution.compile_output == null
      ) {
        outputText.innerHTML = `Creating Submission ... \nSubmission Created ...\nChecking Submission Status\nstatus : ${jsonGetSolution.status.description}`;
        if (jsonResponse.token) {
          let url = `https://judge0-ce.p.rapidapi.com/submissions/${jsonResponse.token}?base64_encoded=true`;
          const getSolution = await fetch(url, {
            method: "GET",
            headers: {
              "x-rapidapi-host": "judge0-ce.p.rapidapi.com",
              "x-rapidapi-key": "be061a261dmsh0b67cecce0e7afcp1c8d54jsn3d1482f87e23",
              // 'X-RapidAPI-Key': '42c866f057msha262e41210b2ac8p16a477jsnfcb2b6ab82bb',// Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/
              "content-type": "application/json",
            },
          });
          jsonGetSolution = await getSolution.json();
        }
      }
      
      if (jsonGetSolution.stdout) {
        const output = atob(jsonGetSolution.stdout);
        outputText.innerHTML = "";
        outputText.innerHTML += `Results :\n${output}\nExecution Time : ${jsonGetSolution.time} Secs\nMemory used : ${jsonGetSolution.memory} bytes`;
        // const newTestCaseResults = { ...this.state.testCaseResults };
        // newTestCaseResults[testCase] = "Passed";
        // this.setState({ testCaseResults: newTestCaseResults });
        // Compare the actual output with the expected output

        const newTestCaseResults = { ...this.state.testCaseResults };
        newTestCaseResults[testCase] = "Passed";
        this.setState({ testCaseResults: newTestCaseResults });

        this.socket.emit('solutionData', {
          user: this.state.user.username,
          memory: jsonGetSolution.memory,
          time: jsonGetSolution.time,
          stdout: output,
          testCase: testCase,
      });

      } else if (jsonGetSolution.stderr) {
        const error = atob(jsonGetSolution.stderr);
        outputText.innerHTML = "";
        outputText.innerHTML += `\n Error :${error}`;
      } else {
        const compilation_error = atob(jsonGetSolution.compile_output);
        outputText.innerHTML = "";
        outputText.innerHTML += `\n Error :${compilation_error}`;
      }
    };
  }